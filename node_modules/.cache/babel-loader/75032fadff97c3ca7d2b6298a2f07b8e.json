{"ast":null,"code":"import { ApolloClient } from \"apollo-client\";\nimport { from } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { currentUrl } from \"./mainUrl\";\nimport store from \"../store\";\nconst uri = `${currentUrl}/graphql`;\nconst httpLink = new HttpLink({\n  uri: `${currentUrl}/graphql`\n}); // const httpLink = createHttpLink({ uri, fetch });\n// const authLink = setContext((_, { headers }) => {\n//   // Get token from localStorage\n//   const { user } = store.getState();\n//   const token = user.token || null;\n//   return {\n//     headers: {\n//       ...headers,\n//       'x-token': token,\n//     },\n//   };\n// });\n\nconst authLink = setContext(async (request, previousContext) => {\n  const {\n    headers\n  } = previousContext;\n  const {\n    user\n  } = store.getState();\n  const token = user.token || null;\n\n  if (headers) {\n    return {\n      headers: { ...headers\n      }\n    };\n  }\n\n  return {\n    headers: { ...headers,\n      \"x-token\": token || null\n    }\n  };\n});\nexport default new ApolloClient({\n  link: from([authLink, httpLink]),\n  cache: new InMemoryCache() // defaultOptions,\n\n}); // export default new ApolloClient({\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });","map":{"version":3,"sources":["/Users/ori-dev/Documents/TestProjest/react-redux/react-redux-login/fontend-react/src/config/client.ts"],"names":["ApolloClient","from","HttpLink","setContext","InMemoryCache","currentUrl","store","uri","httpLink","authLink","request","previousContext","headers","user","getState","token","link","cache"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAAqBC,IAArB,QAAwC,aAAxC;AACA,SAAyBC,QAAzB,QAAyC,kBAAzC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,MAAMC,GAAG,GAAI,GAAEF,UAAW,UAA1B;AAEA,MAAMG,QAAQ,GAAG,IAAIN,QAAJ,CAAa;AAC5BK,EAAAA,GAAG,EAAG,GAAEF,UAAW;AADS,CAAb,CAAjB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,QAAQ,GAAGN,UAAU,CAAC,OAAOO,OAAP,EAAgBC,eAAhB,KAAoC;AAC9D,QAAM;AAAEC,IAAAA;AAAF,MAAcD,eAApB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAWP,KAAK,CAACQ,QAAN,EAAjB;AACA,QAAMC,KAAK,GAAGF,IAAI,CAACE,KAAL,IAAc,IAA5B;;AAEA,MAAIH,OAAJ,EAAa;AACX,WAAO;AACLA,MAAAA,OAAO,EAAE,EACP,GAAGA;AADI;AADJ,KAAP;AAKD;;AAED,SAAO;AACLA,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,iBAAWG,KAAK,IAAI;AAFb;AADJ,GAAP;AAMD,CAnB0B,CAA3B;AAqBA,eAAe,IAAIf,YAAJ,CAAiB;AAC9BgB,EAAAA,IAAI,EAAEf,IAAI,CAAC,CAACQ,QAAD,EAAWD,QAAX,CAAD,CADoB;AAE9BS,EAAAA,KAAK,EAAE,IAAIb,aAAJ,EAFuB,CAG9B;;AAH8B,CAAjB,CAAf,C,CAMA;AACA;AACA;AACA","sourcesContent":["import { ApolloClient } from \"apollo-client\";\nimport { ApolloLink, from, split } from \"apollo-link\";\nimport { createHttpLink, HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { currentUrl } from \"./mainUrl\";\nimport store from \"../store\";\n\nconst uri = `${currentUrl}/graphql`;\n\nconst httpLink = new HttpLink({\n  uri: `${currentUrl}/graphql`,\n});\n\n// const httpLink = createHttpLink({ uri, fetch });\n// const authLink = setContext((_, { headers }) => {\n//   // Get token from localStorage\n//   const { user } = store.getState();\n//   const token = user.token || null;\n//   return {\n//     headers: {\n//       ...headers,\n//       'x-token': token,\n//     },\n//   };\n// });\n\nconst authLink = setContext(async (request, previousContext) => {\n  const { headers } = previousContext;\n  const { user } = store.getState();\n  const token = user.token || null;\n\n  if (headers) {\n    return {\n      headers: {\n        ...headers,\n      },\n    };\n  }\n\n  return {\n    headers: {\n      ...headers,\n      \"x-token\": token || null,\n    },\n  };\n});\n\nexport default new ApolloClient({\n  link: from([authLink, httpLink]),\n  cache: new InMemoryCache(),\n  // defaultOptions,\n});\n\n// export default new ApolloClient({\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });\n"]},"metadata":{},"sourceType":"module"}