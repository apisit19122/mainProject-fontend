{"ast":null,"code":"import { ApolloClient } from \"apollo-client\";\nimport { ApolloLink, from } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { currentUrl } from \"./mainUrl\";\nimport store from \"../store\";\nconst httpLink = new HttpLink({\n  uri: `${currentUrl}/graphql`\n});\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  const {\n    user\n  } = store.getState();\n  const token = user.token || null;\n  operation.setContext({\n    headers: {\n      \"x-token\": token\n    }\n  });\n  return forward(operation);\n});\nexport default new ApolloClient({\n  link: from([authMiddleware, httpLink]),\n  cache: new InMemoryCache() // defaultOptions,\n\n});","map":{"version":3,"sources":["/Users/ori-dev/Documents/TestProjest/react-redux/react-redux-login/fontend-react/src/config/client.ts"],"names":["ApolloClient","ApolloLink","from","HttpLink","InMemoryCache","currentUrl","store","httpLink","uri","authMiddleware","operation","forward","user","getState","token","setContext","headers","link","cache"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAwC,aAAxC;AAEA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,MAAMC,QAAQ,GAAG,IAAIJ,QAAJ,CAAa;AAC5BK,EAAAA,GAAG,EAAG,GAAEH,UAAW;AADS,CAAb,CAAjB;AAIA,MAAMI,cAAc,GAAG,IAAIR,UAAJ,CAAe,CAACS,SAAD,EAAYC,OAAZ,KAAwB;AAC5D;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWN,KAAK,CAACO,QAAN,EAAjB;AACA,QAAMC,KAAK,GAAGF,IAAI,CAACE,KAAL,IAAc,IAA5B;AACAJ,EAAAA,SAAS,CAACK,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACP,iBAAWF;AADJ;AADU,GAArB;AAMA,SAAOH,OAAO,CAACD,SAAD,CAAd;AACD,CAXsB,CAAvB;AAaA,eAAe,IAAIV,YAAJ,CAAiB;AAC9BiB,EAAAA,IAAI,EAAEf,IAAI,CAAC,CAACO,cAAD,EAAiBF,QAAjB,CAAD,CADoB;AAE9BW,EAAAA,KAAK,EAAE,IAAId,aAAJ,EAFuB,CAG9B;;AAH8B,CAAjB,CAAf","sourcesContent":["import { ApolloClient } from \"apollo-client\";\nimport { ApolloLink, from, split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { currentUrl } from \"./mainUrl\";\nimport store from \"../store\";\n\nconst httpLink = new HttpLink({\n  uri: `${currentUrl}/graphql`,\n});\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  const { user } = store.getState();\n  const token = user.token || null;\n  operation.setContext({\n    headers: {\n      \"x-token\": token,\n    },\n  });\n\n  return forward(operation);\n});\n\nexport default new ApolloClient({\n  link: from([authMiddleware, httpLink]),\n  cache: new InMemoryCache(),\n  // defaultOptions,\n});\n"]},"metadata":{},"sourceType":"module"}