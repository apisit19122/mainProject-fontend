{"ast":null,"code":"// import { ApolloClient } from \"apollo-client\";\nimport { ApolloClient, InMemoryCache, HttpLink, from } from \"@apollo/client\"; // import { HttpLink } from \"apollo-link-http\";\n\nimport { setContext } from \"apollo-link-context\"; // import { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport store from \"../store\";\nimport { currentUrl } from \"./mainUrl\"; // const uri = `${currentUrl}/graphql`;\n\nconst httpLink = new HttpLink({\n  uri: `${currentUrl}/graphql`\n}); // const httpLink = createHttpLink({ uri, fetch });\n\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const {\n    user\n  } = store.getState();\n  const token = user.token || null;\n  return {\n    headers: { ...headers,\n      \"x-token\": token\n    }\n  };\n});\nexport const client = new ApolloClient({\n  link: from([authLink, httpLink]),\n  cache: new InMemoryCache() // link: authLink.concat(httpLink) as ApolloLink,\n\n}); // import { ApolloClient } from \"apollo-client\";\n// import { createHttpLink } from \"apollo-link-http\";\n// import { setContext } from \"apollo-link-context\";\n// import { InMemoryCache } from \"apollo-cache-inmemory\";\n// import { currentUrl } from \"./mainUrl\";\n// import store from \"../store\";\n// const uri = `${currentUrl}/graphql`;\n// const httpLink = createHttpLink({ uri, fetch });\n// const authLink = setContext((_, { headers }) => {\n//   const { user } = store.getState();\n//   const token = user.token || null;\n//   return {\n//     headers: {\n//       ...headers,\n//       \"x-token\": token,\n//     },\n//   };\n// });\n// export const client = new ApolloClient({\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache()\n// });","map":{"version":3,"sources":["/Users/ori-dev/Documents/TestProjest/react-redux/react-redux-login/fontend-react/src/config/client.ts"],"names":["ApolloClient","InMemoryCache","HttpLink","from","setContext","store","currentUrl","httpLink","uri","authLink","_","headers","user","getState","token","client","link","cache"],"mappings":"AAAA;AACA,SACEA,YADF,EAEEC,aAFF,EAIEC,QAJF,EAKEC,IALF,QAMO,gBANP,C,CAOA;;AACA,SAASC,UAAT,QAA2B,qBAA3B,C,CACA;;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,UAAT,QAA2B,WAA3B,C,CAEA;;AAEA,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAG,GAAEF,UAAW;AADS,CAAb,CAAjB,C,CAIA;;AACA,MAAMG,QAAQ,GAAGL,UAAU,CAAC,CAACM,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAWP,KAAK,CAACQ,QAAN,EAAjB;AACA,QAAMC,KAAK,GAAGF,IAAI,CAACE,KAAL,IAAc,IAA5B;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,iBAAWG;AAFJ;AADJ,GAAP;AAMD,CAT0B,CAA3B;AAWA,OAAO,MAAMC,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AACrCgB,EAAAA,IAAI,EAAEb,IAAI,CAAC,CAACM,QAAD,EAAkBF,QAAlB,CAAD,CAD2B;AAErCU,EAAAA,KAAK,EAAE,IAAIhB,aAAJ,EAF8B,CAGrC;;AAHqC,CAAjB,CAAf,C,CAMP;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["// import { ApolloClient } from \"apollo-client\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n  HttpLink,\n  from,\n} from \"@apollo/client\";\n// import { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\n// import { InMemoryCache } from \"apollo-cache-inmemory\";\nimport fetch from \"isomorphic-unfetch\";\nimport store from \"../store\";\nimport { currentUrl } from \"./mainUrl\";\n\n// const uri = `${currentUrl}/graphql`;\n\nconst httpLink = new HttpLink({\n  uri: `${currentUrl}/graphql`,\n});\n\n// const httpLink = createHttpLink({ uri, fetch });\nconst authLink = setContext((_, { headers }) => {\n  const { user } = store.getState();\n  const token = user.token || null;\n  return {\n    headers: {\n      ...headers,\n      \"x-token\": token,\n    },\n  };\n});\n\nexport const client = new ApolloClient({\n  link: from([authLink as any, httpLink]),\n  cache: new InMemoryCache(),\n  // link: authLink.concat(httpLink) as ApolloLink,\n});\n\n// import { ApolloClient } from \"apollo-client\";\n// import { createHttpLink } from \"apollo-link-http\";\n// import { setContext } from \"apollo-link-context\";\n// import { InMemoryCache } from \"apollo-cache-inmemory\";\n// import { currentUrl } from \"./mainUrl\";\n// import store from \"../store\";\n\n// const uri = `${currentUrl}/graphql`;\n\n// const httpLink = createHttpLink({ uri, fetch });\n// const authLink = setContext((_, { headers }) => {\n//   const { user } = store.getState();\n//   const token = user.token || null;\n//   return {\n//     headers: {\n//       ...headers,\n//       \"x-token\": token,\n//     },\n//   };\n// });\n\n// export const client = new ApolloClient({\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache()\n// });\n"]},"metadata":{},"sourceType":"module"}