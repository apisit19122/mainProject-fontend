{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink, from } from \"@apollo/client\";\nimport { setContext } from \"apollo-link-context\";\nimport store from \"../store\";\nimport { currentUrl } from \"./mainUrl\";\nconst httpLink = new HttpLink({\n  uri: `${currentUrl}/graphql`\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const {\n    user\n  } = store.getState();\n  const token = user.token || null;\n  return {\n    headers: { ...headers,\n      \"x-token\": token\n    }\n  };\n});\nexport const client = new ApolloClient({\n  link: from([authLink, httpLink]),\n  cache: new InMemoryCache()\n});","map":{"version":3,"sources":["/Users/ori-dev/Documents/TestProjest/react-redux/react-redux-login/fontend-react/src/config/client.ts"],"names":["ApolloClient","InMemoryCache","HttpLink","from","setContext","store","currentUrl","httpLink","uri","authLink","_","headers","user","getState","token","client","link","cache"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,EAAgDC,IAAhD,QAA4D,gBAA5D;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAG,GAAEF,UAAW;AADS,CAAb,CAAjB;AAIA,MAAMG,QAAQ,GAAGL,UAAU,CAAC,CAACM,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAWP,KAAK,CAACQ,QAAN,EAAjB;AACA,QAAMC,KAAK,GAAGF,IAAI,CAACE,KAAL,IAAc,IAA5B;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,iBAAWG;AAFJ;AADJ,GAAP;AAMD,CAT0B,CAA3B;AAWA,OAAO,MAAMC,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AACrCgB,EAAAA,IAAI,EAAEb,IAAI,CAAC,CAACM,QAAD,EAAkBF,QAAlB,CAAD,CAD2B;AAErCU,EAAAA,KAAK,EAAE,IAAIhB,aAAJ;AAF8B,CAAjB,CAAf","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink, from } from \"@apollo/client\";\nimport { setContext } from \"apollo-link-context\";\nimport store from \"../store\";\nimport { currentUrl } from \"./mainUrl\";\n\nconst httpLink = new HttpLink({\n  uri: `${currentUrl}/graphql`,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const { user } = store.getState();\n  const token = user.token || null;\n  return {\n    headers: {\n      ...headers,\n      \"x-token\": token,\n    },\n  };\n});\n\nexport const client = new ApolloClient({\n  link: from([authLink as any, httpLink]),\n  cache: new InMemoryCache(),\n});\n"]},"metadata":{},"sourceType":"module"}